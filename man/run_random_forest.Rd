% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/features_randomforest.R
\name{run_random_forest}
\alias{run_random_forest}
\title{Run Random Forest for Feature Importance Analysis}
\usage{
run_random_forest(X, y)
}
\arguments{
\item{X}{A numeric matrix or data frame containing the predictor variables (features).
Rows represent observations/samples, and columns represent features. This is the fixed effects matrix.}

\item{y}{A numeric vector representing the response (output) variable. Its length must equal the number of rows in `X`.}

\item{ntree}{An integer specifying the number of trees to grow in the random forest. A larger number increases
stability but also computation time. The default value is 500.}
}
\value{
A list containing the following components:
  \itemize{
    \item `features` - A character vector containing the names of features whose importance (MeanDecreaseGini) is greater than 0.5. If no features exceed this threshold, returns an empty vector.
    \item `model` - The full fitted random forest model object of class `randomForest`. This can be used for further inspection, prediction, or plotting.
    \item `oob_error` - The final Out-of-Bag (OOB) error rate of the model, extracted from the last row of the `err.rate` matrix of the model. This provides an estimate of the prediction error.
  }
}
\description{
This function trains a random forest model using the provided feature matrix and response variable.
It calculates feature importance based on the Mean Decrease Gini index and returns a filtered list of significant features,
the trained model object, and the Out-of-Bag (OOB) error rate. The function is particularly useful for
preliminary feature selection in high-dimensional data analysis.
}
\examples{
\donttest{
# Example using the iris dataset (modifying for a regression problem)
data(iris)
# Use petal dimensions to predict sepal length (create a continuous `y`)
X <- iris[, c("Petal.Length", "Petal.Width", "Sepal.Width")]
y <- iris$Sepal.Length

# Run the random forest function
result <- run_random_forest(X, y, ntree = 100) # Smaller ntree for quick example

# Inspect the significant features
print(result$features)

# Check the OOB error
print(result$oob_error)

# Plot the importance from the full model (if needed)
# randomForest::varImpPlot(result$model)
}

}
\seealso{
\code{\link[randomForest]{randomForest}} for the underlying function used to build the model.
\code{\link[randomForest]{importance}} for more details on how variable importance is calculated.
\code{\link[randomForest]{varImpPlot}} for plotting variable importance.
}
